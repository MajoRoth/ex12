// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
        static int two_power;
        /** Initializes the library. */
        function void init() {
            let two_power = Array.new(16);
            let two_power[0] = 1;
            let two_power[1] = 2;
            let two_power[2] = 4;
            let two_power[3] = 8;
            let two_power[4] = 16;
            let two_power[5] = 32;
            let two_power[6] = 64;
            let two_power[7] = 128;
            let two_power[8] = 256;
            let two_power[9] = 512;
            let two_power[10] = 1024;
            let two_power[11] = 2048;
            let two_power[12] = 4096;
            let two_power[13] = 8192;
            let two_power[14] = 16384;
            let two_power[15] = 16384  + 16384;
            return;
        }

        /** Returns the absolute value of x. */
        function int abs(int x) {
            if (x < 0){
                return -x;
            }
            return x;
        }

        /** 
         * Returns the product of x and y. 
         * When a Jack compiler detects the multiplication operator '*' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x*y and multiply(x,y) return the same value.
         */
        function int multiply(int x, int y) {
            // Pseudocode:
            // 1. let sum = 0
            // 2. let shiftedx = x
            // 3. for i = 0 ... n-1 do
            // 4.   if ((i-th bit of y) == 1)
            // 5.      let sum = sum + shiftedx
            // 6.   let shiftedx = 2*shiftedx
            // 7. return sum

            var int sum, shiftedx, counter;

            let sum = 0;
            let shiftedx = x;
            let counter = 0;

            while (counter < 16){
                if (Math.iBit(y, counter)){
                    let sum = sum + shiftedx;
                }
                let shiftedx = shiftedx + shiftedx;
                let counter = counter + 1;
            }
            return sum;
        }

        /** 
         * Returns the integer part of x/y.
         * When a Jack compiler detects the multiplication operator '/' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x/y and divide(x,y) return the same value.
         */
        function int divide(int x, int y) {
            // This should be implemented without using multiplication.
            // Hint: updating the value of 2*q*y in the "if" statement requires
            // at most a single addition operator at every recursion step.
            // Pseudocode:
            // 1. if (y > x) return 0
            // 2. let q = divide(x, 2*y)
            // 3. if ((x - 2*q*y) < y)
            // 4.   return 2*q
            // 5. else
            // 6.   return 2*q + 1
            var int res, sign, absX, absY, q;
            
            let sign = (x < 0) = (y < 0);
            let absX = Math.abs(x);
            let absY = Math.abs(y);

            if (absY > absX){
                return 0;
            }
            let q = Math.divide(absX, absY + absY);

            if (absX - (2*q*absY) < absY){
                let res = q + q;
            }
            let res = q + q + 1;

            if (sign){
                return res;
            }
            return -res;
        }

        /** Returns the integer part of the square root of x. */
        function int sqrt(int x) {
            // This should be implemented without using multiplication or division.
            // Pseudocode (where '**' is the mathematical power function):
            // 1. let y = 0
            // 2. for j = (n/2 - 1) ... 0 do
            // 3.   if ((y + 2**j)**2 <= x) then let y = y + 2**j
            // 4. return y
            var int y, j, q, counter;
            let counter = 7;
            let y = 0;


            while (counter > -1){
                let q = y + two_power[counter];
                if (~(q * q - 1 > x)){
                    let y = q;
                }
                let counter = counter - 1;
            }
            return y;
        }

        /** Returns the greater number. */
        function int max(int a, int b) {
            if (a > b){
                return a;
            }
            return b;
        }

        /** Returns the smaller number. */
        function int min(int a, int b) {
            if (a > b){
                return b;
            }
            return a;
        }

        function int iBit(int x, int k) {
            return (x & two_power[k] = 1);
        }
}
