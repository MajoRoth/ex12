// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
        /** Initializes the Screen. */
        static Array base;
        static boolean color;
        static Array twoPower;

        function void init() {
            let base = 16384;
            let color = true; //black
            let twoPower = Array.new(16);
            let twoPower[0] = 1;
            let twoPower[1] = 2;
            let twoPower[2] = 4;
            let twoPower[3] = 8;
            let twoPower[4] = 16;
            let twoPower[5] = 32;
            let twoPower[6] = 64;
            let twoPower[7] = 128;
            let twoPower[8] = 256;
            let twoPower[9] = 512;
            let twoPower[10] = 1024;
            let twoPower[11] = 2048;
            let twoPower[12] = 4096;
            let twoPower[13] = 8192;
            let twoPower[14] = 16384;
            let twoPower[15] = 16384 + 16384;
            return;
        }

        /** Erases the entire screen. */
        function void clearScreen() {
            var int index;
            let index = 8191;
            while (index > -1) {
                let base[index] = 0;
                let index = index - 1;
            }
            return;
        }

        /** Sets the current color, to be used for all subsequent drawXXX commands.
         *    Black is represented by true, white by false. */
        function void setColor(boolean b) {
            let color = b;
            return;
        }

        /** Draws the (x,y) pixel, using the current color. */
        function void drawPixel(int x, int y) {
            // For this function, you will need to calculate the value x%16.
            // It should be calculated quickly without using multiplication or
            // division, using exactly one basic math/logical operation.
            // In addition, calculating 16384 + y * 32 + x/16 should not use
            // division or multiplication.
            // Pseudocode:
            // 1. Compute the RAM address where the (x,y) pixel is
            //    represented: 16384 + (32*y) + (x/16).
            // 2. Use Memory.peek to get the 16-bit value of this address
            // 3. Use some bitwise operation to set (only) the bit that corresponds
            //    to the pixel to the current color.
            // 4. Use Memory.poke to write the modified 16-bit value to the RAM
            // address.
            var int ram_loc, bit_to_change;
            var int pixel_buf;
            let ram_loc = (Math.multiply(32, y)) + (Math.divide(x, 16));
            let bit_to_change = x&15;
            if(color){
                let pixel_buf = base[ram_loc] | twoPower[bit_to_change];
            }else{
                let pixel_buf = base[ram_loc] & (~twoPower[bit_to_change]);
            }
            let base[ram_loc] = pixel_buf;
            return;
        }

        /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
        function void drawLine(int x1, int y1, int x2, int y2) {
            // The case where x1 != x2 and y1 != y2 should be implemented without
            // multiplication or division.
            // Pseudocode:
            // 1. let x = x1, y = y1, a = 0, b = 0, diff = 0
            // 2. Compute dx and dy
            // 3. while ((a <= dx) and (b <= dy))
            // 4.   do drawPixel(x+a, y+b)
            // 5.   if (diff < 0) { let a=a+1, diff=diff+dy }
            // 6.   else          { let b=b+1, diff=diff-dx }
            //
            // The case where y1 == y2 can be implemented efficiently by
            // trying to draw as many pixels as possible in a single assignment,
            // similarly to Fill in project 4.
            //if(y1 = y2){

            //}else{
            //}
            var int x, y, a, b, diff, dx, dy;
            if(x1 = x2){
                do Screen.verticalLine(x1, y1, y2);
                return;
            }
            if(y1 = y2){
                do Screen.horizontalLine(x1, x2, y1);
                return;
            }
            if(x1 > x2 & y1 > y2){
                do Screen.drawLine(x2, y2, x1, y1);
                return;
            }
            let x = x1;
            let y = y1;
            let a = 0;
            let b = 0;
            let diff = 0;
            let dx = Math.abs(x2 - x1);
            let dy = Math.abs(y2 - y1);
            while ((~(a > dx)) & (~(b > dy))){
                do Screen.drawPixel(x+a, y+b);
                if (diff < 0) 
                { 
                    let a=a+Math.divide(x2 - x1, dx);
                    let diff=diff+dy;
                }
                else
                { 
                    let b=b+Math.divide(y2 - y1, dy);
                    let diff=diff-dx;
                }
            }  
            return;
        }

        /** Draws a filled rectangle whose top left corner is (x1, y1)
         * and bottom right corner is (x2,y2), using the current color. */
        function void drawRectangle(int x1, int y1, int x2, int y2) {
            while(~(y2 < y1)){
                do Screen.drawLine(x1, y1, x2, y1);
                let y1 = y1 + 1;
            }
            return;
        }

        /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
        function void drawCircle(int x, int y, int r) {
            // This can be implemented efficiently by drawing multiple lines at
            // each iteration. You can use multiplication and sqrt.
            // Pseudocode:
            // 1. for (dy = -r ... r)
            // 2.   let halfWidth = sqrt(r*r - dy*dy)
            // 3.   do drawLine(x-halfWidth, y+dy, x+halfWidth, y+dy)
            var int halfWidth, dy;
            let dy = -r;
            while(~(dy>r)){
                let halfWidth = Math.sqrt(Math.multiply(r,r) - Math.multiply(dy,dy));
                do Screen.horizontalLine(x-halfWidth, x+halfWidth, y+dy);
                let dy = dy + 1;
            }
            return;
        }

        function void horizontalLine(int x1, int x2, int y){
            var int xs, xe;
            let xs = Math.min(x1, x2);
            let xe = Math.max(x1, x2);
            
            while (~(xs > xe)) {
                do Screen.drawPixel(xs, y);
                let xs = xs + 1;
            }
            return;
        }
        
        /** Draw vertical line. */
        function void verticalLine(int x, int y1, int y2){
            var int ys, ye;
            let ys = Math.min(y1, y2);
            let ye = Math.max(y1, y2);
            
            while (~(ys > ye)) {
                do Screen.drawPixel(x, ys);
                let ys = ys + 1;
            }
            return;
        }
}
