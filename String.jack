// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    
    field Array string;
    field int length, maxLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int AmaxLength) {
        let maxLength = AmaxLength;
        let length = 0;
        if (maxLength = 0){
            let string = null;
        }
        else {
            let string = Array.new(maxLength);
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (maxLength = 0){
            return;
        }
        do string.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let string[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let string[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        // Pseudocode:
        // 1. let val = 0
        // 2. for (i = 0 .. str.length()) do
        // 3.   let d = integer value of str.charAt(i)
        // 4.   let val = (val*10) + d
        // 5. return val

        var int value, counter, d, factor, exit;
        let value = 0;
        let exit = 0;
        if (charAt(0) = 45){
            let factor = -1;
            let counter = 1;
        }
        else{
            let factor = 1;
            let counter = 0;
        }

        while((counter < length) & (exit = 0)){
            if (String.isDigit(charAt(counter)) = 1){
                let d = charAt(counter) - 48;
                let value = (value * 10) + d;
                let counter = counter + 1;
            }
            else {
                let exit = 1;
            }
        }

        return value * factor;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // Pseudocode:
        // 1. let lastDigit = val % 10
        // 2. let c = character representing lastDigit
        // 3. if (val < 10)
        // 4.   return c (as a string)
        // 5. else
        // 6.   return int2String(val / 10).appendChar(c)

        var int lastDigit, c;

        let lastDigit = val; // MOD!!!
        let c = lastDigit + 48;

        if (val < 10){
            let length = 0;
            do appendChar(c);
        }
        else {
            do setInt(val / 10);
            do appendChar(c);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    /** returns 1 if the int represents a char 0-9 */
    function int isDigit (int c) {
        if((c > 47) & (c < 58)){
            return 1;
        }
        return 0;
    }
}
